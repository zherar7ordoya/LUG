using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace ManejaListasRepudio
{
    class BaseDeDatosCadenas
    {
        public List<string> Cadenas { get; set; } = new List<string>();

        // Método para eliminar cadenas duplicadas utilizando LINQ
        public void EliminarCadenasDuplicadas()
        {
            Cadenas = Cadenas.Distinct().ToList();
        }

        // Método para eliminar cadenas de longitud inválida
        public void EliminarLongitudesInvalidas()
        {
            Cadenas = Cadenas.Where(s => s.Length == 8 || s.Length == 14).ToList();
        }
    }
    class Program
    {
        static void Main()
        {
            // Solicitar al usuario ingresar el nombre del archivo
            Console.Write("Ingrese el nombre del archivo: ");
            string nombreArchivo = Console.ReadLine();

            // Cargar las cadenas desde el archivo
            BaseDeDatosCadenas baseDeDatos = CargarBaseDeDatos(nombreArchivo);

            // Verificar si la base de datos está vacía
            if (baseDeDatos == null)
            {
                Console.WriteLine("ERROR: No se pudo cargar el archivo.");
                return;
            }

            // Solicitar al usuario ingresar la cadena de búsqueda
            Console.Write("Ingrese la cadena de búsqueda: ");
            string cadenaBusqueda = Console.ReadLine();

            // Medir el tiempo de ejecución de las operaciones
            var cronometro = new System.Diagnostics.Stopwatch();
            cronometro.Start();

            // Ordenar, limpiar y buscar la cadena en la base de datos
            baseDeDatos.Cadenas.Sort();
            baseDeDatos.EliminarCadenasDuplicadas();
            baseDeDatos.EliminarLongitudesInvalidas();

            // Realizar la búsqueda y mostrar el resultado
            if (baseDeDatos.Cadenas.Count == 0)
            {
                Console.WriteLine("ERROR: La base de datos quedó vacía después de la limpieza.");
            }
            else
            {
                int indice = baseDeDatos.Cadenas.IndexOf(cadenaBusqueda);
                if (indice != -1)
                {
                    Console.WriteLine($"EXISTE: Cadena encontrada en el índice {indice + 1}: {baseDeDatos.Cadenas[indice]}");
                }
                else
                {
                    Console.WriteLine("NO EXISTE: Cadena no encontrada.");
                }
            }

            // Detener el cronómetro y mostrar el tiempo de operaciones
            cronometro.Stop();
            TimeSpan duracion = cronometro.Elapsed;
            Console.WriteLine($"Tiempo de operaciones: {duracion.Milliseconds} milisegundos");

            // Guardar la base de datos depurada en un archivo de texto
            GuardarBaseDeDatos("depurada.txt", baseDeDatos);
            Console.WriteLine("Base de datos depurada guardada en 'depurada.txt'");

            // Retornar de forma exitosa
            Console.ReadLine();
        }

        // Método para cargar las cadenas desde un archivo de texto
        static BaseDeDatosCadenas CargarBaseDeDatos(string nombreArchivo)
        {
            try
            {
                BaseDeDatosCadenas baseDeDatos = new BaseDeDatosCadenas
                {
                    Cadenas = File.ReadAllLines(nombreArchivo).ToList()
                };
                return baseDeDatos;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR: {ex.Message}");
                return null;
            }
        }

        // Método para guardar las cadenas en un archivo de texto
        static void GuardarBaseDeDatos(string nombreArchivo, BaseDeDatosCadenas baseDeDatos)
        {
            try
            {
                File.WriteAllLines(nombreArchivo, baseDeDatos.Cadenas);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR: {ex.Message}");
            }
        }
    }
}
